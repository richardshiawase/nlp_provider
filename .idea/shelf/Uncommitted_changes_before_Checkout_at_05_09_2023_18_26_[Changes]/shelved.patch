Index: nlp_provider/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import datetime\r\nimport json\r\nimport os\r\nimport pathlib\r\nimport pickle\r\nimport re\r\nimport shutil\r\nfrom collections import defaultdict\r\nimport time\r\nfrom functools import reduce\r\nfrom multiprocessing import Process, Pool\r\nfrom time import sleep\r\n\r\nimport numpy as np\r\nimport requests\r\nfrom django.core import serializers\r\nfrom django.core.files.storage import FileSystemStorage\r\nfrom django.core.paginator import Paginator, PageNotAnInteger, EmptyPage\r\nfrom django.forms import model_to_dict\r\nfrom django.http import HttpResponse, HttpResponseRedirect, FileResponse\r\nfrom django.shortcuts import render\r\nimport warnings\r\n\r\nfrom openpyxl.styles import PatternFill\r\n\r\nfrom classM.Asuransi import Asuransi\r\nfrom classM.DFHandler import DFHandler\r\nfrom classM.Dataset import Dataset\r\nfrom classM.HospitalInsurance import HospitalInsurance\r\nfrom classM.ItemMaster import ItemMaster\r\nfrom classM.MasterData import MasterData\r\nfrom classM.States import States\r\nfrom model.models import ItemProvider, List_Processed_Provider, MatchProcess, MasterMatchProcess, GoldenRecordMatch\r\nfrom classM.Pembersih import Pembersih\r\nfrom classM.PerbandinganResult import PerbandinganResult\r\nfrom classM.PredictionId import PredictionId\r\nfrom classM.ColumnToRead import ColumnToRead\r\n\r\nwarnings.simplefilter(action='ignore', category=FutureWarning)\r\nimport pandas as pd\r\nimport pandas as pde\r\nfrom requests import Response\r\nfrom django.http import JsonResponse\r\nimport django\r\n\r\ndjango.setup()\r\nfrom sklearn import metrics\r\nfrom sklearn.feature_extraction.text import TfidfVectorizer\r\nfrom sklearn.metrics import precision_score, f1_score, accuracy_score\r\n\r\nfrom model import models\r\nfrom model.views import create_model\r\n\r\nfrom model.models import Provider_Model, Provider\r\nfrom tqdm import tqdm\r\nfrom django.core.cache import cache\r\n\r\nfrom celery import shared_task\r\n# from .forms import UploadFileForm\r\n# Create your views here.\r\n\r\n\r\ngolden_record_match = GoldenRecordMatch()\r\ngolden_record_match.set_master_match_process()\r\n\r\nmaster_match_process = golden_record_match.get_master_match_process()\r\nmatch_process = MatchProcess()\r\nmatch_process.set_golden_record_instance(golden_record_match)\r\nmatch_process.start()\r\nmatch_process.set_list_provider()\r\nlist_provider_model_object = match_process.get_list_provider()\r\nprovider_dict_item = {}\r\nmaster_item_list = []\r\n\r\n\r\n@shared_task()\r\ndef my_background_task():\r\n    global master_data\r\n    master_data = MasterData()\r\n\r\nmy_background_task()\r\n\r\nfilename = 'tfidf_vec.pickle'\r\ntfidf_vec1 = pickle.load(open(filename, 'rb'))\r\nfilename = 'finalized_model.sav'\r\nloaded_model1 = pickle.load(open(filename, 'rb'))\r\nstate = States()\r\nasuransi = Asuransi()\r\nserver_prefix = \"https://www.asateknologi.id\"\r\n\r\ndef index(request):\r\n    context = {\"list_pembanding\": []}\r\n    return render(request, 'home.html', context)\r\n\r\n\r\ndef kompilasi(request):\r\n    pembanding = models.Provider.objects.all()\r\n    list_pembandinge = pembanding\r\n    list_pembanding = []\r\n    for pembanding in list_pembandinge:\r\n        pembanding.file_location = pembanding.file_location.split(\"media\")[1]\r\n        list_pembanding.append(pembanding)\r\n\r\n    return render(request, 'kompilasi.html')\r\n\r\n\r\ndef kompilasi_data(request):\r\n    pembanding_all = models.Provider.objects.all()\r\n    provider_list = []\r\n    for pembanding in pembanding_all:\r\n        pembanding.file_location = pembanding.file_location.split(\"media\")[1]\r\n        dfs = pd.read_excel(\"media/\" + pembanding.file_location_result)\r\n        for index, row in dfs.iterrows():\r\n            alamat = row['Alamat']\r\n            alamat_prediksi = row['Alamat Prediction']\r\n            ri = row['ri']\r\n            rj = row['rj']\r\n            item_obj = ItemProvider(row['Provider Name'], row['Alamat'], row[\"Prediction\"], row[\"Score\"], 0, ri, rj)\r\n            item_obj.set_nama_asuransi(pembanding.nama_asuransi)\r\n            item_obj.set_selected(str(row['Compared']))\r\n            item_obj.set_alamat_prediction(alamat_prediksi)\r\n\r\n            provider_list.append(item_obj.__dict__)\r\n\r\n    return JsonResponse(provider_list, safe=False)\r\n\r\n\r\ndef master_linked_load(request):\r\n    # request.session['list_asuransi'] = asuransi\r\n    if request.method == \"GET\":\r\n        ls = asuransi.get_dict_item_asuransi().values()\r\n        return JsonResponse(list(ls), safe=False)\r\n\r\n    return JsonResponse({'message': 'error'})\r\n\r\n\r\ndef newe(request):\r\n    list_provider_model_object.set_empty_provider_list()\r\n    data_list = models.Provider.objects.raw(\r\n        \"select mm.id,mm.match_percentage,mm.id_model,mm.id_file_result,mm.status_finish,mm.created_at,mp.nama_asuransi,mp.file_location,mf.file_location_result from model_matchprocess mm inner join model_provider mp on mm.id_model = mp.id inner join model_fileresult mf on mm.id_file_result = mf.id group by mp.nama_asuransi order by mm.created_at DESC\")\r\n    for data in data_list:\r\n        provider = Provider()\r\n        provider.set_nama_asuransi_model(data.nama_asuransi)\r\n        provider.set_file_location(data.file_location)\r\n\r\n        provider.set_id(data.id_model)\r\n        provider.file_location_result = data.file_location_result\r\n        provider.set_created_at(data.created_at)\r\n        provider.set_status_matching(data.status_finish)\r\n        list_item_provider = []\r\n        list_item_provider_json = []\r\n        dt = models.Provider.objects.raw(\"select * from model_itemprovider where id_model = %s\",\r\n                                         [provider.get_primary_key_provider()])\r\n\r\n        for item in dt:\r\n            item_provider = ItemProvider()\r\n            item_provider.set_id(item.pk)\r\n            item_provider.set_provider_name(item.nama_provider)\r\n            item_provider.set_alamat_prediction(item.alamat_prediction)\r\n            item_provider.set_alamat(item.alamat)\r\n            item_provider.set_proba_score(item.proba_score)\r\n            item_provider.set_total_score(item.total_score)\r\n            item_provider.set_label_name(item.label_name)\r\n            item_provider.set_ri(item.ri)\r\n            item_provider.set_rj(item.rj)\r\n            item_provider.set_id_asuransi(item.id_asuransi)\r\n            item_provider.set_selected(\"-\")\r\n            del item_provider._state\r\n\r\n            # list_item_provider.append(item_provider)\r\n            list_item_provider_json.append(item_provider.__dict__)\r\n        provider.set_list_item_provider_json(list_item_provider_json)\r\n        # provider.set_list_item_provider(list_item_provider)\r\n        list_provider_model_object.add_provider(provider)\r\n\r\n    if request.method == \"GET\":\r\n        return JsonResponse(list_provider_model_object.get_provider_list_json(), safe=False)\r\n\r\n    return JsonResponse({'message': 'error'})\r\n\r\n\r\ndef open_file_perbandingan(request):\r\n    data = request.session['data_provider']\r\n    id_provider = data['id']\r\n    # provider = list_provider_model_object.get_a_provider_from_id(id_provider)\r\n    return JsonResponse(data[\"list_item_provider_json\"], safe=False)\r\n\r\n\r\ndef hos_ins_list_item(request):\r\n    if 'hospital_linked_list' in request.session:\r\n        hospital_linked_list = request.session['hospital_linked_list']\r\n        return JsonResponse(list(hospital_linked_list.values()), safe=False)\r\n\r\n\r\ndef hos_ins_list_page(request):\r\n    context = {\"data\": []}\r\n    return render(request, 'matching/index_hospital_asuransi.html', context=context)\r\n\r\n\r\ndef hos_ins_list(request):\r\n    asuransi_dict = asuransi.get_dict_item_asuransi()\r\n    if request.method == \"POST\":\r\n        data = json.loads(request.POST[\"data\"])\r\n        nama_asuransi = data[\"singkatan\"]\r\n        asu = asuransi_dict.get(data[\"singkatan\"])\r\n\r\n        request.session['nama_asuransi'] = nama_asuransi\r\n        request.session['hospital_linked_list'] = asu[\"hospital_linked_list\"]\r\n        return JsonResponse({'data': asu[\"hospital_linked_list\"], 'nama_asuransi': nama_asuransi})\r\n\r\n\r\n\r\n\r\ndef update_master(request):\r\n    if request.method == \"POST\":\r\n        request.session[\"update_master\"] = {\"status\":False,\"object\": {}}\r\n\r\n        print(\"tes update master\")\r\n        data = json.loads(request.POST[\"processed_file\"])\r\n        row_index = data[\"row_index\"]\r\n        id_provider = data['id_provider']\r\n        nama_provider = data[\"nama_provider\"]\r\n        alamat = data[\"alamat\"]\r\n        province = data[\"state\"]\r\n        city_choose = data[\"city\"]\r\n        telepon = data[\"telepon\"]\r\n        kategori = data[\"kategori\"]\r\n\r\n        state_id = \"-\"\r\n        city_id = \"-\"\r\n        kategori_id = 0\r\n\r\n        kategori_dict = match_process.get_category_dict()\r\n\r\n        for provinsi in state.get_item_state_dict().values():\r\n            if province == provinsi.get_state_name():\r\n                state_id = provinsi.get_state_id()\r\n\r\n        for kota in state.get_item_city_list():\r\n            if city_choose == kota.get_city_name():\r\n                city_id = kota.get_city_id()\r\n\r\n        for k, v in kategori_dict.items():\r\n            print(kategori,k,v)\r\n            if kategori == k:\r\n                kategori_id = int(v)\r\n\r\n        url = server_prefix+\"/api/hospital/\"+id_provider\r\n        myobj = {'row_index':row_index,'id_provider':id_provider,'provider_name': nama_provider, 'address': alamat,'category_1':kategori_id,'tel_no':telepon,'state_id':state_id,'city_id':city_id}\r\n        x = requests.put(url, json=myobj)\r\n        if x.status_code == 200:\r\n            request.session[\"update_master\"] = {\"status\":True,\"object\":myobj}\r\n            return JsonResponse({'data': 200})\r\n        else:\r\n            request.session[\"update_master\"] = {\"status\":False,\"object\":[]}\r\n\r\n            return JsonResponse({'data': 400})\r\n\r\n        pass\r\n    else:\r\n        # print(\"tes update master\")\r\n        pass\r\n\r\n    return JsonResponse({'data': 400})\r\n\r\ndef show_updated_master(request):\r\n    print(\"Show updated master\")\r\n    message = {\"status\":False,\"object\":[]}\r\n    if \"update_master\" in request.session:\r\n        message = request.session.get(\"update_master\")\r\n        print(message)\r\n        del request.session['update_master']\r\n    # object = request.session[\"update_master\"][\"object\"]\r\n    return JsonResponse({'message': message})\r\n\r\ndef unlink_hos(request):\r\n    if request.method == \"POST\":\r\n        data = json.loads(request.POST[\"data\"])\r\n        id_hosins = data['id_hosins']\r\n        id_asuransi = data['insurance_id']\r\n        url = 'https://www.asateknologi.id/api/unlink-inshos'\r\n        myobj = {'id_hosins': id_hosins,'id_asuransi':id_asuransi}\r\n        x = requests.post(url, json=myobj)\r\n        asuransi_dict = asuransi.get_dict_item_asuransi()\r\n        asu = asuransi_dict.get(request.session['nama_asuransi'])\r\n\r\n        if (x.status_code == 200):\r\n            if 'hospital_linked_list' in request.session:\r\n                hospital_linked_list = request.session['hospital_linked_list']\r\n                del hospital_linked_list[str(id_hosins)]\r\n                asu[\"hospital_linked_list\"] = hospital_linked_list\r\n                asu[\"linked_hospital_count\"] = len(hospital_linked_list)\r\n                request.session['hospital_linked_list'] = hospital_linked_list\r\n\r\n        return JsonResponse({'data': x.status_code})\r\n\r\n\r\ndef perbandingan(request):\r\n    if request.method == \"POST\":\r\n        data = json.loads(request.POST[\"data\"])\r\n        request.session['data_provider'] = data\r\n        # request.session['response'] = response\r\n        # loop_delete(file_location)\r\n        return JsonResponse(200, safe=False)\r\n\r\n\r\ndef perbandingan_page(request):\r\n    data = request.session['data_provider']\r\n    nama_asuransi = data['nama_asuransi']\r\n    link_result = data[\"file_location_result\"]\r\n\r\n    context = {\"list\": [], \"link_result\": link_result, 'nama_asuransi': nama_asuransi}\r\n    return render(request, 'matching/perbandingan_page_open_result.html', context=context)\r\n\r\n\r\ndef perbandingan_upload_page(request):\r\n    response = requests.get('https://asateknologi.id/api/insuranceall')\r\n    response = response.json()\r\n    context = {\"list_insurance\": response[\"val\"]}\r\n    return render(request, 'matching/perbandingan-upload.html', context=context)\r\n\r\n\r\ndef perbandingan_versus_page(request):\r\n    response = requests.get('https://asateknologi.id/api/insuranceall')\r\n    response = response.json()\r\n    context = {\"list_insurance\": response[\"val\"]}\r\n    return render(request, 'matching/perbandingan-versus.html', context=context)\r\n\r\n\r\ndef tampungan(request):\r\n    link_result = file_location\r\n    if link_result is None:\r\n        link_result = \"-\"\r\n\r\n    context = {\"provider_list\": [], \"link_result\": link_result}\r\n    return render(request, 'matching/perbandingan_basket.html', context=context)\r\n\r\n\r\ndef linked_master(request):\r\n    return render(request, 'matching/linked_master.html')\r\n\r\n    # return JsonResponse(asuransi.get_dict_item_asuransi(), safe=False)\r\n\r\n\r\ndef tampungan_rev(request):\r\n    global provider_liste\r\n    global file_location\r\n    provider_liste = []\r\n\r\n    dfs = None\r\n\r\n    try:\r\n        dfs = pd.read_excel(\"basket_provider.xlsx\")\r\n    except:\r\n        print(\"dataframe not founde\")\r\n\r\n    provider_name_list = []\r\n    provider_name_predict_list = []\r\n    score_list = []\r\n    # df_dataset = pd.read_excel(\"dataset_excel_copy.xlsx\")\r\n\r\n    provider_list = []\r\n    if dfs is not None:\r\n        for index, row in tqdm(dfs.iterrows(), total=dfs.shape[0]):\r\n\r\n            provider_name_label = str(row['course_title']).strip().lower()\r\n            alamat = str(row['alamat']).strip().lower()\r\n            concat = provider_name_label + \"#\" + alamat\r\n            concat = concat.replace('&', '').replace('.', '')\r\n            sample1 = vectorize_text(concat, tfidf_vec1)\r\n            y_preds = loaded_model1.predict(sample1)\r\n            p = loaded_model1.predict_proba(sample1)\r\n            ix = p.argmax(1).item()\r\n            nil = (f'{p[0, ix]:.2}')\r\n            # if(float(nil.strip(\"%\")) < 1.0):\r\n            # y_preds = \"-\"\r\n            provider_name_list.append(provider_name_label)\r\n            provider_name_predict_list.append(y_preds)\r\n            score_list.append(nil)\r\n\r\n            val = (df_non_duplicate['course_titles'].eq(provider_name_label))\r\n            res = df_non_duplicate[val]\r\n            provider_object = ItemProvider(provider_name_label, alamat, y_preds, nil, 0, 0, 0)\r\n\r\n            if not res.empty:\r\n                pred = str(y_preds).replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")\r\n                val_master = (df_non_duplicate['subject'].eq(pred))\r\n                res_master = df_non_duplicate[val_master]\r\n\r\n                al = res_master[\"alamat\"].head(1)\r\n                try:\r\n                    alamat_pred = al.values[0]\r\n                except:\r\n                    print(\"error\")\r\n            elif res.empty:\r\n                alamat_pred = \"-\"\r\n\r\n            provider_object.set_alamat_prediction(alamat_pred)\r\n\r\n            provider_list.append(provider_object.__dict__)\r\n\r\n    return JsonResponse(provider_list, safe=False)\r\n\r\n\r\ndef hapus_tampungan(request):\r\n    dfs = pd.read_excel(\"basket_provider.xlsx\")\r\n\r\n    if request.method == \"POST\":\r\n        nama = request.POST['nama_provider']\r\n        # nama = json.load(request).get('dats')\r\n        print(nama.upper())\r\n        delete_row = dfs[dfs[\"course_title\"] == nama.upper()].index\r\n        dfs = dfs.drop(delete_row)\r\n        # print(dfs)\r\n        dfs.to_excel('basket_provider.xlsx', index=False)\r\n\r\n    return HttpResponse(\"OK\")\r\n\r\n\r\ndef upload_master(request):\r\n    global provider_liste\r\n    global file_location\r\n    provider_liste = []\r\n    response = requests.get('https://asateknologi.id/api/insuranceall')\r\n    response = response.json()\r\n    dfs = None\r\n\r\n    if request.method == \"POST\":\r\n        file_location = \"media\" + request.POST[\"file_location\"]\r\n\r\n    # elif request.method == \"GET\":\r\n    # file_location=\"media/demo.xlsx\"\r\n\r\n    try:\r\n        dfs = pd.read_excel(file_location)\r\n    except:\r\n        print(\"dataframe not found\")\r\n    provider_list = []\r\n    # # # MASUKKAN DF KE LIST\r\n    if dfs is not None:\r\n        for index, row in dfs.iterrows():\r\n            provider_name = row['Provider Name']\r\n            alamat = row['Alamat']\r\n            alamat_prediction = row['Alamat Prediction']\r\n            y_preds = row[\"Prediction\"]\r\n            nil = row[\"Score\"]\r\n            ri = row[\"RI\"]\r\n            rj = row[\"RJ\"]\r\n            provider_object = ItemProvider(provider_name, alamat, y_preds, nil, 0, ri, rj)\r\n            provider_object.set_alamat_prediction(alamat_prediction)\r\n            provider_list.append(provider_object)\r\n    page = request.GET.get('page', 1)\r\n    paginator = Paginator(provider_list, 10)\r\n    try:\r\n        users = paginator.page(page)\r\n    except PageNotAnInteger:\r\n        users = paginator.page(1)\r\n    except EmptyPage:\r\n        users = paginator.page(paginator.num_pages)\r\n\r\n    context = {\"list_insurance\": response.get(\"val\"), \"list\": provider_list}\r\n\r\n    return render(request, 'master/bulk_upload.html', context=context)\r\n\r\n\r\ndef list_master(request):\r\n    return render(request, 'master/index.html')\r\n\r\n\r\ndef list_master_varian(request):\r\n    return render(request, 'master/index_master_varian.html')\r\n\r\n\r\ndef list_master_sinkron(request):\r\n    return render(request, 'master/sinkron.html')\r\n\r\n\r\ndef master_add(request):\r\n    kategori_dict = match_process.get_category_dict()\r\n    context = {\"state_list\": state.get_item_state_dict().values(), \"city_list\": state.get_item_city_list(),\r\n               \"kategori_dict\": kategori_dict.keys()}\r\n    return render(request, 'master/master_add.html', context=context)\r\n\r\n\r\ndef list_master_process(request):\r\n    list_item_master = master_data.get_list_item_master_provider_json()\r\n    return JsonResponse(list_item_master, safe=False)\r\n\r\ndef get_master_with_api():\r\n    response = requests.get('https://asateknologi.id/api/daftar-rs-1234')\r\n    provider_list = response.json().get(\"val\")\r\n\r\n    return provider_list\r\n\r\n\r\ndef sinkron_master_process(request):\r\n    provider_list = get_master_with_api()\r\n\r\n    master_data_list = []\r\n    # master_data = MasterData()\r\n\r\n    df = pd.DataFrame()\r\n\r\n    for prov in provider_list:\r\n        id = prov[\"id\"]\r\n        stateId = prov[\"stateId\"]\r\n        cityId = prov[\"CityId\"]\r\n        try:\r\n            category_1 = int(prov[\"Category_1\"])\r\n        except:\r\n            category_1 = 0\r\n        category_2 = prov[\"Category_2\"]\r\n        telephone = prov[\"TEL_NO\"]\r\n        provider_name_master = prov[\"PROVIDER_NAME\"]\r\n        address = prov[\"ADDRESS\"]\r\n\r\n        df = df.append(pd.Series(\r\n            {'ProviderId': id, 'stateId': stateId, 'cityId': cityId, 'Category_1': category_1, 'Category_2': category_2,\r\n             'PROVIDER_NAME': provider_name_master, 'ADDRESS': address, 'TEL_NO': telephone},\r\n            name=3))\r\n\r\n    df.to_excel(\"master_provider.xlsx\", index=False)\r\n\r\n    return JsonResponse(master_data_list, safe=False)\r\n\r\n\r\ndef sinkron_master_process_not_request():\r\n    print(\"Sinkron master proses\")\r\n    response = requests.get('https://asateknologi.id/api/daftar-rs-1234')\r\n    provider_list = response.json().get(\"val\")\r\n    master_data_list = []\r\n    # master_data = MasterData()\r\n\r\n    df = pd.DataFrame()\r\n\r\n    for prov in provider_list:\r\n        id = prov[\"id\"]\r\n        stateId = prov[\"stateId\"]\r\n        cityId = prov[\"CityId\"]\r\n        try:\r\n            category_1 = int(prov[\"Category_1\"])\r\n        except:\r\n            category_1 = 0\r\n        category_2 = prov[\"Category_2\"]\r\n        telephone = prov[\"TEL_NO\"]\r\n        provider_name_master = prov[\"PROVIDER_NAME\"]\r\n        address = prov[\"ADDRESS\"]\r\n\r\n        df = df.append(pd.Series(\r\n            {'ProviderId': id, 'stateId': stateId, 'cityId': cityId, 'Category_1': category_1, 'Category_2': category_2,\r\n             'PROVIDER_NAME': provider_name_master, 'ADDRESS': address, 'TEL_NO': telephone},\r\n            name=3))\r\n\r\n    df.to_excel(\"master_provider.xlsx\", index=False)\r\n\r\n    return JsonResponse(master_data_list, safe=False)\r\n\r\n\r\ndef download_master(request):\r\n    file_path = os.getcwd() + \"\\\\master_provider.xlsx\"\r\n    if os.path.exists(file_path):\r\n        with open(file_path, 'rb') as fh:\r\n            response = HttpResponse(fh.read(),\r\n                                    content_type=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\r\n            response['Content-Disposition'] = 'attachment; filename=master_provider.xlsx'\r\n            return response\r\n    else:\r\n        raise None\r\n    return response\r\n\r\n\r\ndef download_master_varian(request):\r\n    file_path = os.getcwd() + \"\\\\master_varian_1.xlsx\"\r\n    if os.path.exists(file_path):\r\n        with open(file_path, 'rb') as fh:\r\n            response = HttpResponse(fh.read(),\r\n                                    content_type=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\r\n            response['Content-Disposition'] = 'attachment; filename=master_varian.xlsx'\r\n            return response\r\n    else:\r\n        raise None\r\n    return response\r\n\r\n\r\ndef sinkron_dataset_process(request):\r\n    dff = pd.DataFrame()\r\n\r\n    find = False\r\n    master_data_list = []\r\n    dfs = None\r\n    dfs_varian = None\r\n    try:\r\n        dfs = pd.read_excel(\"master_provider.xlsx\")\r\n        df = cache.get('dataset')\r\n        if df is None:\r\n            df = pd.read_excel(\"dataset_excel_copy.xlsx\")\r\n            cache.set('dataset', df)\r\n        dfs_varian = df.groupby('subject')\r\n    except:\r\n        print(\"dataframe not found\")\r\n    for index, row in dfs.iterrows():\r\n        id = row['ProviderId']\r\n        stateId = row['stateId']\r\n        cityId = row['cityId']\r\n        category_1 = row['Category_1']\r\n        category_2 = row['Category_2']\r\n        provider_name_master = row['PROVIDER_NAME']\r\n        address = row['ADDRESS']\r\n        tel_no = row['TEL_NO']\r\n        master_data = MasterData(id, provider_name_master, address, category_1, category_2, tel_no, stateId, cityId)\r\n        varian_list = []\r\n\r\n        try:\r\n            dfe = dfs_varian.get_group(provider_name_master)\r\n            for index_varian, row_varian in dfe.iterrows():\r\n                varian_list.append(row_varian['course_title'])\r\n                pass\r\n\r\n        except:\r\n            row = pd.Series(\r\n                {'course_title': master_data.nama_provider + \"#\" + master_data.alamat, 'alamat': master_data.alamat,\r\n                 'subject': master_data.nama_provider},\r\n                name=3)\r\n            df = df.append(row)\r\n            df.reset_index(drop=True, inplace=True)\r\n\r\n            continue\r\n\r\n    df.to_excel(\"dataset_excel_copy.xlsx\", index=False)\r\n    return HttpResponse(\"Tes\")\r\n\r\n\r\ndef master_varian_process(request):\r\n    dff = pd.DataFrame()\r\n    dataset = match_process.get_dataset()\r\n    master_data = MasterData()\r\n    master_data_list = []\r\n    dfs_varian = dataset.get_bulk_dataset().groupby('subject')\r\n    for item_master in tqdm(master_data.get_list_item_master_provider(),\r\n                            total=len(master_data.get_list_item_master_provider())):\r\n        varian_list = []\r\n        try:\r\n            dfe = dfs_varian.get_group(item_master.get_nama_master())\r\n            for index_varian, row_varian in dfe.iterrows():\r\n                varian_list.append(row_varian['course_title'])\r\n        except Exception as e:\r\n            # print(e)\r\n            continue\r\n\r\n        item_master.set_varian(varian_list)\r\n\r\n        dff = dff.append(pd.Series(\r\n            {'ProviderId': item_master.get_id_master(), 'ProviderType': \"Master\",\r\n             'stateId': item_master.get_state_id_master(), 'cityId': item_master.get_city_id_master(),\r\n             'Category_1': item_master.get_category_1_master(),\r\n             'Category_2': item_master.get_category_2_master(),\r\n             'PROVIDER_NAME': item_master.get_nama_master(), 'ADDRESS': item_master.get_alamat_master(),\r\n             'TEL_NO': item_master.get_telepon_master()},\r\n            name=3))\r\n\r\n        for varian in item_master.get_varian():\r\n            dff = dff.append(pd.Series(\r\n                {'ProviderId': item_master.get_id_master(), 'ProviderType': \"Varian\",\r\n                 'stateId': item_master.get_state_id_master(), 'cityId': item_master.get_city_id_master(),\r\n                 'Category_1': item_master.get_category_1_master(), 'Category_2': item_master.get_category_2_master(),\r\n                 'PROVIDER_NAME': varian, 'ADDRESS': \"-\", 'TEL_NO': \"-\"},\r\n                name=3))\r\n\r\n        # master_data_list.append(master_data.__dict__)\r\n\r\n    #\r\n    dff.to_excel(\"master_varian_1.xlsx\", index=False)\r\n\r\n    return JsonResponse(master_data_list, safe=False)\r\n\r\n\r\ndef master_varian_list_read(request):\r\n    dff = pd.DataFrame()\r\n\r\n    find = False\r\n    master_data_list = []\r\n    dfs = None\r\n    try:\r\n        dfs = pd.read_excel(\"master_varian_1.xlsx\")\r\n    except:\r\n        print(\"dataframe not found\")\r\n\r\n    for index, row in dfs.iterrows():\r\n        id = row['ProviderId']\r\n        stateId = row['stateId']\r\n        cityId = row['cityId']\r\n        category_1 = row['Category_1']\r\n        category_2 = row['Category_2']\r\n        provider_name_master = row['PROVIDER_NAME']\r\n        address = row['ADDRESS']\r\n        tel_no = row['TEL_NO']\r\n        master_data = MasterData(id, provider_name_master, address, category_1, category_2, tel_no, stateId, cityId)\r\n        varian_list = []\r\n\r\n        try:\r\n            dfe = dfs_varian.get_group(provider_name_master)\r\n            for index_varian, row_varian in dfe.iterrows():\r\n                varian_list.append(row_varian['course_title'])\r\n                pass\r\n\r\n        except:\r\n            continue\r\n\r\n        master_data.set_varian(varian_list)\r\n\r\n        dff = dff.append(pd.Series(\r\n            {'ProviderId': id, 'ProviderType': \"Master\", 'stateId': stateId, 'cityId': cityId, 'Category_1': category_1,\r\n             'Category_2': category_2,\r\n             'PROVIDER_NAME': provider_name_master, 'ADDRESS': address, 'TEL_NO': tel_no},\r\n            name=3))\r\n\r\n        for varian in master_data.get_varian():\r\n            dff = dff.append(pd.Series(\r\n                {'ProviderId': id, 'ProviderType': \"Varian\", 'stateId': stateId, 'cityId': cityId,\r\n                 'Category_1': category_1, 'Category_2': category_2,\r\n                 'PROVIDER_NAME': varian, 'ADDRESS': \"-\", 'TEL_NO': \"-\"},\r\n                name=3))\r\n\r\n        master_data_list.append(master_data.__dict__)\r\n\r\n    #\r\n    dff.to_excel(\"master_varian_1.xlsx\", index=False)\r\n\r\n    return JsonResponse(master_data_list, safe=False)\r\n\r\n\r\ndef temporer_store(request):\r\n    if request.method == \"POST\":\r\n\r\n        id = request.POST['id']\r\n        if id is not None and id != '':\r\n            item = ItemProvider.objects.get(pk=id)\r\n\r\n            if id in provider_dict_item:\r\n                del provider_dict_item[id]\r\n            else:\r\n                provider_dict_item[id] = item\r\n\r\n    context = {\"provider_name\": provider_dict_item, \"link_result\": \"-\"}\r\n\r\n    # return HttpResponse(context)\r\n    return render(request, 'matching/temporer.html', context=context)\r\n\r\ndef temporer_store_master(request):\r\n    if request.method == \"POST\":\r\n        master_item_list.clear()\r\n        master = json.loads(request.POST['processed_file'])\r\n        row_index = master['row_index']\r\n        id      = master['provider_id']\r\n        state_id = master['stateId']\r\n        city_id = master['cityId']\r\n        category_1 = master['category_1']\r\n        category_2 = master['category_2']\r\n        provider_name = master['provider_name']\r\n        address = master['address']\r\n        tel_no = master['tel_no']\r\n\r\n        item_master = ItemMaster(id,\r\n                                 state_id,\r\n                                 city_id,\r\n                                 category_1,\r\n                                 category_2,\r\n                                 provider_name,\r\n                                 address,\r\n                                 tel_no)\r\n        item_master.set_datatable_row_index(row_index)\r\n        master_item_list.append(item_master)\r\n    if len(master_item_list) > 0:\r\n        return JsonResponse({'data':200,'link':'-'})\r\n    return JsonResponse({'data':404,'link':'-'})\r\n\r\n\r\ndef temporer_delete_master(request):\r\n    if request.method == \"POST\":\r\n        master_item_list.clear()\r\n        master = json.loads(request.POST['processed_file'])\r\n        row_index = master['row_index']\r\n\r\n        id      = master['provider_id']\r\n        state_id = master['stateId']\r\n        city_id = master['cityId']\r\n        category_1 = master['category_1']\r\n        category_2 = master['category_2']\r\n        provider_name = master['provider_name']\r\n        address = master['address']\r\n        tel_no = master['tel_no']\r\n\r\n        item_master = ItemMaster(id,\r\n                                 state_id,\r\n                                 city_id,\r\n                                 category_1,\r\n                                 category_2,\r\n                                 provider_name,\r\n                                 address,\r\n                                 tel_no)\r\n\r\n        item_master.set_datatable_row_index(row_index)\r\n        master_item_list.append(item_master)\r\n\r\n        url = server_prefix + \"/api/hospital/\" + id\r\n\r\n        x = requests.delete(url)\r\n\r\n        if x:\r\n            return JsonResponse({'data':200,'link':'-'})\r\n    return JsonResponse({'data':404,'link':'-'})\r\n\r\ndef edit_master(request):\r\n    if request.method == \"POST\":\r\n        print(\"Googl\")\r\n    else:\r\n        item_master = master_item_list[0]\r\n    kategori_dict = match_process.get_category_dict()\r\n    state_name = \"-\"\r\n    city_name = \"-\"\r\n    kategori = \"-\"\r\n    for provinsi in state.get_item_state_dict().values():\r\n        if int(item_master.get_state_id_master()) == int(provinsi.id):\r\n            state_name = provinsi.state_name\r\n\r\n    for kota in state.get_item_city_list():\r\n        if int(item_master.get_city_id_master()) == int(kota.get_city_id()):\r\n            city_name = kota.get_city_name()\r\n\r\n    for k,v in kategori_dict.items():\r\n        if int(v) == int(item_master.get_category_1_master()):\r\n            kategori = k\r\n\r\n    context = {\"item_master\": item_master, \"link_result\": \"-\",\"state_list\": state.get_item_state_dict().values(), \"city_list\": state.get_item_city_list(),\r\n               \"kategori_dict\": kategori_dict.keys(),\"state_name\":state_name,\"city_name\":city_name,\"kategori\":kategori}\r\n    #\r\n    # return \"ooops\"\r\n    return render(request, 'matching/edit_master.html', context=context)\r\n\r\ndef read_link_result_and_delete_provider_name2(nama_provider, link_result):\r\n    global dfs\r\n\r\n    val = (dfs['Nama'].str.lower().eq(nama_provider.lower()))\r\n    rese = dfs[val]\r\n\r\n    # if not rese.empty:\r\n    #     print(rese.index.item())\r\n    # print(dfs)\r\n    global deo\r\n    global deoq\r\n    if not rese.empty:\r\n        #\r\n\r\n        try:\r\n            deo = dfs.drop(rese.index.item(), inplace=True)\r\n\r\n            val = (dw['Nama'].str.lower().eq(nama_provider.lower()))\r\n            reseq = dw[val]\r\n            if not reseq.empty:\r\n                deoq = dw.drop(reseq.index.item(), inplace=True)\r\n                # deoq = dw\r\n                # if (nama_provider == \"klinik takenoko sudirman\"):\r\n                #     vae = deoq['Nama Provider'].str.strip().str.lower().eq(\"klinik takenoko sudirman\")\r\n                #     print(deoq[vae])\r\n        except Exception as e:\r\n            for x in rese.index.tolist():\r\n                deo = dfs.drop(x, inplace=True)\r\n\r\n            pass\r\n\r\n\r\ndef read_link_result_and_delete_provider_name(nama_provider):\r\n    dfs = pd.read_excel(link_result)\r\n    val = (dfs['Provider Name'].eq(nama_provider.upper()))\r\n    rese = dfs[val]\r\n    print(\"hapus1 \" + nama_provider, rese)\r\n\r\n    if not rese.empty:\r\n        print(\"hapus \" + nama_provider, rese)\r\n        deo = dfs.drop(rese.index.item())\r\n        deo.to_excel(link_result, sheet_name='Sheet1', index=False)\r\n        dat = Provider.objects.filter(file_location_result__contains=link_result.split(\"/\")[1]).values()\r\n        dw = pd.read_excel(dat[0][\"file_location\"])\r\n        val = (dw['Nama Provider'].eq(nama_provider.upper()))\r\n        reseq = dw[val]\r\n        if not reseq.empty:\r\n            deoq = dw.drop(reseq.index.item())\r\n            deoq.to_excel(dat[0][\"file_location\"], sheet_name='Sheet1', index=False)\r\n\r\n\r\ndef loop_delete(link_result):\r\n    print(\"loop data2 \", link_result)\r\n    global dfs\r\n    global deo\r\n    global deoq\r\n    global dw\r\n    deo = None\r\n    deoq = None\r\n\r\n    file_master = \"Master_Add.xlsx\"\r\n    df_handler.convert_to_dataframe_from_excel(file_master)\r\n    df = df_handler.get_data_frame()\r\n\r\n    dat = Provider.objects.filter(file_location_result__contains=link_result.split(\"/\")[1]).values()\r\n    file_location = dat[0][\"file_location\"]\r\n\r\n    df_handler.convert_to_dataframe_from_excel(file_location)\r\n    dw = df_handler.get_data_frame()\r\n\r\n    df_handler.convert_to_dataframe_from_excel(link_result)\r\n    dfs = df_handler.get_data_frame()\r\n\r\n    for index, row in tqdm(df.iterrows(), total=df.shape[0]):\r\n        nama_provider = row['provider_name']\r\n        read_link_result_and_delete_provider_name2(nama_provider, link_result)\r\n\r\n    dfs.to_excel(link_result, sheet_name='Sheet1', index=False)\r\n\r\n\r\ndef add_master_by_dashboard(request):\r\n    if request.method == \"POST\":\r\n        nama_provider = request.POST[\"nama_provider\"]\r\n        alamat_provider = request.POST[\"alamat_provider\"]\r\n        provinsi_provider = request.POST[\"provinsi_provider\"]\r\n        city_provider = request.POST[\"city_provider\"]\r\n        telepon_provider = request.POST[\"telepon_provider\"]\r\n        kategori_provider = request.POST[\"kategori_provider\"]\r\n        latitude_provider = request.POST[\"latitude_provider\"]\r\n        longitude_provider = request.POST[\"longitude_provider\"]\r\n        cat_dict = match_process.get_category_dict()\r\n        kategori_provider = cat_dict.get(kategori_provider)\r\n        provinsi_provider = state.get_item_state_dict().get(provinsi_provider)\r\n        city = state.get_city()\r\n        city_provider = city.get_item_city_only_dict().get(city_provider)\r\n        url = 'https://www.asateknologi.id/api/master'\r\n        myobj = {'stateId': provinsi_provider.get_state_id(),\r\n                 'cityId': city_provider.get_city_id(),\r\n                 'category1': kategori_provider,\r\n                 'provider_name': nama_provider,\r\n                 'address': alamat_provider,\r\n                 'tel': telepon_provider,\r\n                 'latitude': latitude_provider,\r\n                 'longitude': longitude_provider\r\n                 }\r\n        try:\r\n            pass\r\n            # x = requests.post(url, json=myobj)\r\n            token = \"eyJ0eXBlIjoiSldUIiwiYWxnIjoiSFMyNTYifQ.eyJzdWIiOiJ1c2VyZm9ycHJvdmlkZXIiLCJpYXQiOjE2ODMyNzExNjYsIm5hbWUiOiJ1c2VyZm9ycHJvdmlkZXIifQ.l65gkzEqH-uuN9b84ZU4aADwM2Rb3nZRgsmmAqwTQsc\"\r\n            header = {\"Content-Type\": \"application/json\", \"Authorization\": f\"Bearer {token}\"}\r\n            url_sinkron_sinta = \"http://192.168.80.210/be/api/dashboard/syncronize\"\r\n            # d = requests.get(url_sinkron_sinta,headers=header)\r\n        except Exception as e:\r\n            print(e)\r\n\r\n    return HttpResponse(200)\r\n\r\n\r\ndef add_master_store(request):\r\n    if request.method == \"POST\":\r\n        df = pd.read_excel(\"Master_Add.xlsx\")\r\n        post_ide = request.POST[\"post_idew\"]\r\n        nama_provider = post_ide.split(\"#\")[0]\r\n        alamat = post_ide.split(\"#\")[1]\r\n        link_result = request.POST[\"link_result\"]\r\n        val = (df['provider_name'].str.lower().eq(nama_provider.lower()))\r\n        res = df[val]\r\n        # # # kalau kosong alias belum ada nama provider di dalam file master add, maka proses\r\n        if res.empty:\r\n            row = pd.Series({'provider_name': nama_provider, 'alamat': alamat})\r\n            df = df.append(row, ignore_index=True)\r\n            df.to_excel(\"Master_Add.xlsx\", index=False)\r\n\r\n        read_link_result_and_delete_provider_name(nama_provider)\r\n\r\n\r\n\r\n    else:\r\n        return HttpResponse(\"OK\")\r\n\r\n    # return HttpResponse(context)\r\n    return HttpResponse(\"OK\")\r\n\r\n\r\ndef update_temporer_store(request):\r\n    global name\r\n    global link_result\r\n    if request.method == \"POST\":\r\n        post_ide = request.POST[\"post_idew\"]\r\n        link_result = request.POST[\"link_result\"]\r\n        name = post_ide\r\n        context = {\"provider_name\": post_ide, \"link_result\": link_result}\r\n    else:\r\n        if name in provider_liste:\r\n            provider_liste.remove(name)\r\n        context = {\"provider_name\": provider_liste, \"link_result\": link_result}\r\n    return render(request, 'matching/temporer.html', context=context)\r\n\r\n\r\ndef add_to_dataset(request):\r\n    if request.method == \"POST\":\r\n        # OPEN DATASET FILE\r\n        dataset = match_process.get_dataset()\r\n        df = dataset.get_bulk_dataset()\r\n\r\n        df_basket = pd.read_excel(\"basket_provider.xlsx\")\r\n\r\n        # SEARCH PROVIDER IN DATASET\r\n        for label_name, key_provider in list(\r\n                zip(request.POST.getlist('nama_label'), request.POST.getlist('value_provider'))):\r\n            label_name = label_name.split(\"#\")[0]\r\n\r\n            item_provider = ItemProvider.objects.get(pk=key_provider)\r\n\r\n            for x in range(10):\r\n                try:\r\n                    row = pd.Series(\r\n                        {'course_title': item_provider.get_nama_alamat(), 'alamat': item_provider.get_alamat(),\r\n                         'subject': label_name}, name=3)\r\n                    df = df.append(row, ignore_index=True)\r\n                    cache.delete('dataset')\r\n                except:\r\n                    break\r\n\r\n            try:\r\n                rowe = pd.Series(\r\n                    {'course_title': item_provider.get_nama_provider(), 'alamat': item_provider.get_alamat()}, name=3)\r\n                df_basket = df_basket.append(rowe, ignore_index=True)\r\n            except:\r\n                break\r\n\r\n        # df = df.reset_index(drop=True)\r\n        df_basket.to_excel(\"basket_provider.xlsx\", index=False)\r\n        df.to_excel(\"dataset_excel_copy.xlsx\", index=False)\r\n        # create_model(df)\r\n\r\n        context = {\"list_pembanding\": []}\r\n\r\n        return render(request, 'home.html', context)\r\n\r\n    return HttpResponse(\"Marco Polo\")\r\n\r\n\r\ndef process_temporer_store(request):\r\n    # dfs = cache.get('dataset')\r\n    # if dfs is None:\r\n    #     dfs = pd.read_excel(\"dataset_excel_copy.xlsx\")\r\n    #     cache.set('dataset', dfs)\r\n    #\r\n    # dfz = dfs.dropna(subset=\"alamat\")\r\n    # dfa = dfz.drop_duplicates(subset='subject')\r\n    label_list = []\r\n    dataset = match_process.get_dataset()\r\n    dfa = dataset.get_dataframe_after_cleaned_no_duplicate()\r\n    for index, row in dfa.iterrows():\r\n        alamat = str(row['alamat'])\r\n        label = row[\"subject\"]\r\n        if label + \"#\" + alamat not in label_list:\r\n            label_list.append(label + \"#\" + alamat)\r\n    context = {\"label_list\": label_list, \"list\": provider_dict_item, \"link_result\": \"-\"}\r\n    # return HttpResponse(\"Process Temporer\")\r\n    return render(request, 'matching/proses_temporer.html', context=context)\r\n\r\n\r\ndef get_label(request):\r\n    dfs = cache.get('dataset')\r\n    if dfs is None:\r\n        dfs = pd.read_excel(\"dataset_excel_copy.xlsx\")\r\n        cache.set('dataset', dfs)\r\n    dfs = dfs.sort_values(by=['subject'], ascending=True)\r\n    dfz = dfs.dropna(subset=\"alamat\")\r\n    dfa = dfz.drop_duplicates(subset='subject')\r\n    label_list = []\r\n    print(dfa.size, dfs.size)\r\n    for index, row in dfa.iterrows():\r\n        provider_name = row['course_title']\r\n        alamat = str(row['alamat'])\r\n        label = row[\"subject\"]\r\n        if label + \"#\" + alamat not in label_list:\r\n            label_list.append(label + \"#\" + alamat)\r\n\r\n    context = {\"label_list\": label_list}\r\n    return JsonResponse(context, safe=False)\r\n\r\n\r\ndef check_header(df):\r\n    header_list = ['Provinsi', 'Kota', 'Nama Provider', 'Alamat']\r\n    df_header_list = list(df.columns.values)\r\n    if df_header_list == header_list:\r\n        return True\r\n    return False\r\n\r\n\r\ndef vectorize_text(text, tfidf_vec):\r\n    # text = \"Klinik Ananda\"\r\n    my_vec = tfidf_vec.transform([text])\r\n    return my_vec.toarray()\r\n\r\n\r\ndef cacah_dataframe(df):\r\n    split_row_each = 800\r\n    start_index = 0\r\n    iteration_count = int(df.shape[0] / split_row_each)\r\n    sisa = df.shape[0] % split_row_each\r\n    sisa_row = iteration_count * split_row_each + sisa\r\n    df_list = []\r\n    for x in range(iteration_count):\r\n        end_index = start_index + split_row_each\r\n        df_new = df.iloc[start_index:end_index]\r\n        start_index = end_index\r\n        # df_list.append([df_new,lr])\r\n        df_list.append(df_new)\r\n    aw = lambda x, y: y if x > 0 else 0\r\n    df_last = df.iloc[start_index:aw(sisa, sisa_row)]\r\n    df_list.append(df_last)\r\n\r\n    return df_list\r\n\r\n\r\ndef is_file_with_this_insurance_exists(nama_asuransi):\r\n    mydata = Provider.objects.filter(nama_asuransi__contains=nama_asuransi).order_by('created_at').values()\r\n    return mydata\r\n\r\n\r\ndef update_perbandingan_excel():\r\n    pass\r\n\r\n\r\ndef perbandingan_result(request):\r\n    global uploaded_file\r\n    global contexte\r\n    global perbandingan_model\r\n    sinkron_master_process_not_request()\r\n    master_data = MasterData()\r\n\r\n    if request.method == 'POST':\r\n        # # # REQUEST DARI PROSES FILE\r\n        if not bool(request.FILES.get('perbandinganModel', False)):\r\n            pembanding_model_return = json.loads(request.POST['processed_file'])\r\n            nama_asuransi = pembanding_model_return[\"nama_asuransi\"]\r\n            provider = Provider.get_model_from_filter(nama_asuransi)\r\n\r\n        # # # REQUEST DARI UPLOAD FILE\r\n        else:\r\n            # # init file storage object\r\n            file_storage = FileSystemStorage()\r\n\r\n            # # init Perbandingan object\r\n            provider = Provider()\r\n\r\n            # # get nama asuransi and file request\r\n            data_asuransi = request.POST['insurance_option']\r\n            file = request.FILES['perbandinganModel']\r\n\r\n            nama_asuransi = str(data_asuransi).split(\"#\")[0]\r\n            id_asuransi = str(data_asuransi).split(\"#\")[1]\r\n            # save the file to /media/\r\n            c = file_storage.save(file.name, file)\r\n\r\n            # get file url\r\n            file_url = file_storage.path(c)\r\n\r\n            # set file location and nama_asuransi to Perbandingan object\r\n            provider.set_file_location(file_url)\r\n            provider.set_nama_asuransi_model(nama_asuransi)\r\n            provider.set_id_asuransi_model(id_asuransi)\r\n            provider.link_to_item_list()\r\n\r\n        list_provider_model_object.add_provider(provider)\r\n        start_time = time.time()\r\n        match_process.set_master_data(master_data)\r\n        match_process.process_matching()\r\n        match_process.create_file_result()\r\n\r\n        master_match_process.set_master_data(master_data)\r\n        master_match_process.set_file_result_match_processed(match_process.get_file_result())\r\n        master_match_process.process_master_matching()\r\n        master_match_process.save_matching_information()\r\n\r\n        golden_record_match.set_final_result(master_match_process.get_file_final_result_master_match())\r\n        golden_record_match.set_file_result(master_match_process.get_file_result_match_processed())\r\n        golden_record_match.process_golden_record()\r\n        # master_match_process.delete_provider_item_hospital_insurances_with_id_insurances()\r\n        # master_match_process.insert_into_end_point_andika_assistant_item_provider()\r\n        print(\"--- %s seconds ---\" % (time.time() - start_time))\r\n\r\n        list_item_provider_json = []\r\n        list_item_provider = []\r\n\r\n        dt = models.Provider.objects.raw(\"select * from model_itemprovider where id_model = %s\",\r\n                                         [provider.get_primary_key_provider()])\r\n        for item in dt:\r\n            item_provider = ItemProvider()\r\n            item_provider.set_id(item.pk)\r\n            item_provider.set_provider_name(item.nama_provider)\r\n            item_provider.set_alamat_prediction(item.alamat_prediction)\r\n            item_provider.set_alamat(item.alamat)\r\n            item_provider.set_proba_score(item.proba_score)\r\n            item_provider.set_total_score(item.total_score)\r\n            item_provider.set_label_name(item.label_name)\r\n            item_provider.set_ri(item.ri)\r\n            item_provider.set_rj(item.rj)\r\n            item_provider.set_id_asuransi(item.id_asuransi)\r\n            item_provider.set_selected(\"-\")\r\n            del item_provider._state\r\n\r\n            list_item_provider.append(item_provider)\r\n            list_item_provider_json.append(item_provider.__dict__)\r\n        provider.set_list_item_provider_json(list_item_provider_json)\r\n        provider.set_list_item_provider(list_item_provider)\r\n\r\n    return JsonResponse(provider.get_list_item_provider_json(), safe=False)\r\ndef perbandingan_result_versus(request):\r\n    global uploaded_file\r\n    global contexte\r\n    global perbandingan_model\r\n    sinkron_master_process_not_request()\r\n    master_data = MasterData()\r\n    master_df = []\r\n    print(os.getcwd())\r\n    if request.method == 'POST':\r\n        data_provider = []\r\n        # # # REQUEST DARI PROSES FILE\r\n        if not bool(request.FILES.get('perbandinganModel1', False)):\r\n            pembanding_model_return = json.loads(request.POST['processed_file'])\r\n            nama_asuransi = pembanding_model_return[\"nama_asuransi\"]\r\n            provider = Provider.get_model_from_filter(nama_asuransi)\r\n\r\n        # # # REQUEST DARI UPLOAD FILE\r\n        else:\r\n            # # init file storage object\r\n            file_storage = FileSystemStorage()\r\n\r\n            # # init Perbandingan object\r\n            provider1 = Provider()\r\n            provider2 = Provider()\r\n\r\n            # # get nama asuransi and file request\r\n            data_asuransi1 = request.POST['insurance_option1']\r\n            data_asuransi2 = request.POST['insurance_option2']\r\n\r\n\r\n\r\n            file1 = request.FILES['perbandinganModel1']\r\n            file2 = request.FILES['perbandinganModel2']\r\n\r\n\r\n\r\n\r\n            nama_asuransi1 = str(data_asuransi1).split(\"#\")[0]\r\n            nama_asuransi2 = str(data_asuransi2).split(\"#\")[0]\r\n\r\n            id_asuransi1 = str(data_asuransi1).split(\"#\")[1]\r\n            id_asuransi2 = str(data_asuransi2).split(\"#\")[1]\r\n\r\n\r\n\r\n\r\n            # save the file to /media/\r\n            c1 = file_storage.save(file1.name, file1)\r\n            c2 = file_storage.save(file2.name, file2)\r\n\r\n\r\n            # get file url\r\n            file_url1 = file_storage.path(c1)\r\n            file_url2 = file_storage.path(c2)\r\n\r\n\r\n            # set file location and nama_asuransi to Perbandingan object\r\n            provider1.set_file_location(file_url1)\r\n            provider2.set_file_location(file_url2)\r\n            print(nama_asuransi1,nama_asuransi2)\r\n            provider1.set_nama_asuransi_model(nama_asuransi1)\r\n            provider2.set_nama_asuransi_model(nama_asuransi2)\r\n\r\n            provider1.set_id_asuransi_model(id_asuransi1)\r\n            provider2.set_id_asuransi_model(id_asuransi2)\r\n\r\n            provider1.link_to_item_list()\r\n            provider2.link_to_item_list()\r\n\r\n            data_provider.append(provider1)\r\n            data_provider.append(provider2)\r\n\r\n\r\n        for provider in data_provider:\r\n            start_time = time.time()\r\n            match_process.set_master_data(master_data)\r\n            match_process.process_matching_versus(provider)\r\n            match_process.create_file_result()\r\n            master_match_process.set_master_data(master_data)\r\n            master_match_process.set_file_result_match_processed(match_process.get_file_result())\r\n            master_match_process.process_master_matching()\r\n\r\n\r\n            master_df.append(master_match_process.get_final_result_dataframe())\r\n\r\n            master_match_process.save_matching_information()\r\n\r\n            golden_record_match.set_final_result(master_match_process.get_file_final_result_master_match())\r\n            golden_record_match.set_file_result(master_match_process.get_file_result_match_processed())\r\n            golden_record_match.process_golden_record()\r\n            print(\"--- %s seconds ---\" % (time.time() - start_time))\r\n\r\n            list_item_provider_json = []\r\n            list_item_provider = []\r\n\r\n            dt = models.Provider.objects.raw(\"select * from model_itemprovider where id_model = %s\",\r\n                                             [provider.get_primary_key_provider()])\r\n            for item in dt:\r\n                item_provider = ItemProvider()\r\n                item_provider.set_id(item.pk)\r\n                item_provider.set_provider_name(item.nama_provider)\r\n                item_provider.set_alamat_prediction(item.alamat_prediction)\r\n                item_provider.set_alamat(item.alamat)\r\n                item_provider.set_proba_score(item.proba_score)\r\n                item_provider.set_total_score(item.total_score)\r\n                item_provider.set_label_name(item.label_name)\r\n                item_provider.set_ri(item.ri)\r\n                item_provider.set_rj(item.rj)\r\n                item_provider.set_id_asuransi(item.id_asuransi)\r\n                item_provider.set_selected(\"-\")\r\n                del item_provider._state\r\n\r\n                list_item_provider.append(item_provider)\r\n                list_item_provider_json.append(item_provider.__dict__)\r\n            provider.set_list_item_provider_json(list_item_provider_json)\r\n            provider.set_list_item_provider(list_item_provider)\r\n\r\n    red_fill = PatternFill(start_color='FF0000', end_color='FF0000', fill_type='solid')\r\n    green_fill = PatternFill(start_color='00FF00', end_color='00FF00', fill_type='solid')\r\n    master_df[0]['Compared'] = 'False'\r\n    master_df[1]['Compared'] = 'False'\r\n    master_df[0]['IdMaster'] = master_df[0]['IdMaster'].astype(int)\r\n    master_df[1]['IdMaster'] = master_df[1]['IdMaster'].astype(int)\r\n\r\n    for index,row in master_df[0].iterrows():\r\n        id_master1 = int(row['IdMaster'])\r\n        for index2,row2 in master_df[1].iterrows():\r\n            id_master2 = int(row2['IdMaster'])\r\n\r\n            if(id_master1 == id_master2):\r\n                master_df[0].at[index, 'Compared'] = 'True'\r\n                master_df[1].at[index2, 'Compared'] = 'True'\r\n                break\r\n\r\n    timestamp = datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')\r\n    output_1 = 'media\\\\file1_'+timestamp+'.xlsx'\r\n    output_2 = 'media\\\\file2_'+timestamp+'.xlsx'\r\n    master_df[0].to_excel(output_1, index=False, header=True)\r\n    master_df[1].to_excel(output_2, index=False, header=True)\r\n\r\n\r\n    # Create an Excel writer using pandas and openpyxl\r\n    # excel_file_path = 'dataframe_data_all_red_rows.xlsx'\r\n    # with pd.ExcelWriter(excel_file_path, engine='openpyxl') as writer:\r\n    #     master_df[0].to_excel(writer, sheet_name='Sheet1', index=False, header=True)\r\n    #     worksheet = writer.sheets['Sheet1']\r\n    #     for row_idx in range(2, len(master_df[0]) + 2):  # Start from row 2 (header is row 1)\r\n    #         for col_idx in range(1, len(master_df[0].columns) + 1):\r\n    #             worksheet.cell(row=row_idx, column=col_idx).fill = red_fill\r\n\r\n\r\n\r\n    # for index,row in master_df[0].iterrows():\r\n    #     id_master1 = row['IdMaster']\r\n    #     for index,row in master_df[1].iterrows():\r\n    #         id_master2 = row['IdMaster']\r\n\r\n\r\n    # return HttpResponse(data_provider)\r\n    request.session['output1'] = os.getcwd()+'\\\\'+output_1\r\n    request.session['output2'] = os.getcwd()+'\\\\'+output_2\r\n    return JsonResponse({'data':200,'link1':output_1,'link2':output_2})\r\n\r\n\r\ndef download_file(request):\r\n    file1_path = request.session['output1']  # Replace with the actual file path\r\n    file2_path = request.session['output2']  # Replace with the actual file path\r\n\r\n    if os.path.exists(file1_path) and os.path.exists(file2_path):\r\n        # Open both files in binary mode\r\n        file1 = open(file1_path, 'rb')\r\n        file2 = open(file2_path, 'rb')\r\n\r\n        # Create a zip file containing both files\r\n        response = HttpResponse(content_type='application/zip')\r\n        response['Content-Disposition'] = 'attachment; filename=\"files.zip\"'\r\n\r\n        import zipfile\r\n        with zipfile.ZipFile(response, 'w') as zipf:\r\n            zipf.writestr('file1.xlsx', file1.read())\r\n            zipf.writestr('file2.xlsx', file2.read())\r\n\r\n        # Close the files\r\n        file1.close()\r\n        file2.close()\r\n\r\n        return response\r\n    else:\r\n        return HttpResponse(\"File not found\", status=404)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/nlp_provider/views.py b/nlp_provider/views.py
--- a/nlp_provider/views.py	(revision 0ff3e87905e40bc43a7afa80f4533257fd2fe4fe)
+++ b/nlp_provider/views.py	(date 1693818461300)
@@ -1341,7 +1341,7 @@
             if(id_master1 == id_master2):
                 master_df[0].at[index, 'Compared'] = 'True'
                 master_df[1].at[index2, 'Compared'] = 'True'
-                break
+
 
     timestamp = datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
     output_1 = 'media\\file1_'+timestamp+'.xlsx'
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"c41a05f3-401c-48aa-9389-cd39e7d1c49f\" name=\"Changes\" comment=\"er\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/classM/ItemMaster.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/classM/ItemMaster.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/model/models.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/model/models.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"HTML File\" />\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"RESET_MODE\" value=\"HARD\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2FwDkPSADAPfsz8IXwx1GemBeRE\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;DefaultHtmlFileTemplate&quot;: &quot;HTML File&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/User/PycharmProjects/nlp_provider/templates/matching&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;\r\n  },\r\n  &quot;keyToStringList&quot;: {\r\n    &quot;com.intellij.ide.scratch.ScratchImplUtil$2/New Scratch File&quot;: [\r\n      &quot;Python&quot;,\r\n      &quot;HTML&quot;\r\n    ]\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\User\\PycharmProjects\\nlp_provider\\templates\\matching\" />\r\n      <recent name=\"C:\\Users\\User\\PycharmProjects\\nlp_provider\\templates\\master\" />\r\n      <recent name=\"C:\\Users\\User\\PycharmProjects\\nlp_provider\\templates\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\User\\PycharmProjects\\nlp_provider\\templates\\matching\" />\r\n      <recent name=\"C:\\Users\\User\\PycharmProjects\\nlp_provider\\classM\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"c41a05f3-401c-48aa-9389-cd39e7d1c49f\" name=\"Changes\" comment=\"er\" />\r\n      <created>1665394394507</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1665394394507</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"er\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"er\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 0ff3e87905e40bc43a7afa80f4533257fd2fe4fe)
+++ b/.idea/workspace.xml	(date 1693818461416)
@@ -6,8 +6,7 @@
   <component name="ChangeListManager">
     <list default="true" id="c41a05f3-401c-48aa-9389-cd39e7d1c49f" name="Changes" comment="er">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/classM/ItemMaster.py" beforeDir="false" afterPath="$PROJECT_DIR$/classM/ItemMaster.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/model/models.py" beforeDir="false" afterPath="$PROJECT_DIR$/model/models.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/nlp_provider/views.py" beforeDir="false" afterPath="$PROJECT_DIR$/nlp_provider/views.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -25,7 +24,7 @@
   <component name="Git.Settings">
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="main" />
+        <entry key="$PROJECT_DIR$" value="versus_error" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
